
AVRASM ver. 2.2.8  main.asm Thu May 18 13:45:06 2023

[builtin](2): Including file 'C:/Program Files/Microchip/MPLABX/v6.00/packs/Microchip/ATmega_DFP/2.4.131/avrasm/inc\m328Pdef.inc'
main.asm(9): Including file 'printlib.inc'
[builtin](2): Including file 'C:/Program Files/Microchip/MPLABX/v6.00/packs/Microchip/ATmega_DFP/2.4.131/avrasm/inc\m328Pdef.inc'
main.asm(9): Including file 'printlib.inc'
                                 
                                 .dseg                ; prepnuti do pameti dat 1
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .org 0x100           ; od adresy 0x100 (adresy 0 - 0x100 nepouzivejte)
                                 
000100                           flag: .byte 1        ; rezervovani mista pro 1 bajt
                                 
                                 .cseg                ; prepnuti do pameti programu
                                 ; podprogramy pro praci s displejem
                                 .org 0x1000
                                 .include "printlib.inc"
                                 
                                 ;
                                 ; for BI-SAP at FIT, CTU
                                 ;
                                 ; Shield pinout:
                                 ; UNO   AVR	    LCD
                                 ; D4	PD4	    D4
                                 ; D5	PD5	    D5
                                 ; D6	PD6	    D6
                                 ; D7	PD7	    D7
                                 ; D8	PB0	    RS
                                 ; D9	PB1	    E
                                 ; D10	PB2	    Backlight
                                 ; A0	ADC0	    Buttons
                                     
                                 ; lcd_init: setup IO ports and initialize the LCD
                                 init_disp:
001000 934f                          push    r20
001001 938f                          push    r24
001002 939f                          push    r25
001003 930f                          push    r16
                                 
                                     ; set IO ports
001004 94f8                          cli
001005 b145                          in	    r20, PORTB
001006 7f4c                          andi    r20, 0xfc
001007 b945                          out	    PORTB, r20
                                 
001008 b144                          in	    r20, DDRB
001009 6043                          ori	    r20, 0x03	; set RS, E, backlight to output
00100a b944                          out	    DDRB, r20
                                 
00100b b14b                          in	    r20, PORTD
00100c 704f                          andi    r20, 0x0f
00100d b94b                          out	    PORTD, r20
                                 
00100e b14a                          in	    r20, DDRD
00100f 6f40                          ori	    r20, 0xf0   ; set PD(7) - PD(4) to outputs
001010 b94a                          out	    DDRD, r20
001011 9478                          sei
                                 
001012 e090                          ldi	    r25, 0
001013 e684                          ldi	    r24, 100
001014 940e 10d0                     call    lcd_delay_us
                                 ; pokus
001016 e491                          ldi	    r25, 65
001017 ef8f                          ldi	    r24, 255
001018 940e 10d0                     call    lcd_delay_us
                                 
00101a 94f8                      cli
00101b b14b                          in	    r20, PORTD
00101c 704f                          andi    r20, 0x0f
00101d 6340                          ori	    r20, 0x30	    ; cmd: function set: 4-bit
00101e b94b                          out	    PORTD, r20
00101f 9478                          sei
001020 940e 1072                     call    lcd_clock_cmd   ; only “half” command is sent
                                 
                                 
001022 e191                          ldi	    r25, 17
001023 ef8f                          ldi	    r24, 255
001024 940e 10d0                     call    lcd_delay_us
                                 
                                 
001026 94f8                      cli
001027 b14b                          in	    r20, PORTD
001028 704f                          andi    r20, 0x0f
001029 6340                          ori	    r20, 0x30	    ; cmd: function set: 4-bit
00102a b94b                          out	    PORTD, r20
00102b 9478                          sei
00102c 940e 1072                     call    lcd_clock_cmd   ; only “half” command is sent
                                 
                                 
00102e e090                          ldi	    r25, 0
00102f e788                          ldi	    r24, 120
001030 940e 10d0                     call    lcd_delay_us
                                 
001032 94f8                      cli
001033 b14b                          in	    r20, PORTD
001034 704f                          andi    r20, 0x0f
001035 6340                          ori	    r20, 0x30	    ; cmd: function set: 4-bit
001036 b94b                          out	    PORTD, r20
001037 9478                          sei
001038 940e 1072                     call    lcd_clock_cmd   ; only “half” command is sent
                                 
                                 
                                 
                                 ; pokus end
                                 
                                     ; init display
00103a 94f8                          cli
00103b b14b                          in	    r20, PORTD
00103c 704f                          andi    r20, 0x0f
00103d 6240                          ori	    r20, 0x20	    ; cmd: function set: 4-bit
00103e b94b                          out	    PORTD, r20
00103f 9478                          sei
001040 940e 1072                     call    lcd_clock_cmd   ; only “half” command is sent
                                 
001042 e208                          ldi	    r16, 0x28	    ; 4-bit, 2 lines, 8×5 font
001043 940e 1080                     call    lcd_send_cmd
                                 
001045 e00c                          ldi	    r16, 0x0c	    ; cursor off
001046 940e 1080                     call    lcd_send_cmd
                                 
001048 e006                          ldi	    r16, 0x06	    ; increment mode
001049 940e 1080                     call    lcd_send_cmd
                                 
00104b 940e 10be                     call    lcd_clear
                                 
00104d 910f                          pop	    r16
00104e 919f                          pop	    r25
00104f 918f                          pop     r24
001050 914f                          pop     r20
001051 9508                          ret
                                 
                                 ; show_char: show character in r16 at position in r17
                                 ; position format: r17 = ---rcccc
                                 ; r ... row (0..1)
                                 ; c ... column (0..15)
                                 show_char:
                                     ; cursor
001052 940e 1057                     call lcd_set_cursor
                                     ; show
001054 940e 10bd                     call lcd_show_char
001056 9508                          ret
                                 
                                 ; lcd_set_cursor: set cursor to position in r17:
                                 ; r17 = ---rcccc (row, column)
                                 lcd_set_cursor:
001057 930f                          push r16
001058 2f01                          mov r16, r17
001059 940e 106c                     call lcd_set_ddram_addr
00105b 910f                          pop r16
00105c 9508                          ret
                                 
                                 ; lcd_set_cgram_addr: set cgram address (r16)
                                 lcd_set_cgram_addr:
00105d 938f                          push r24
00105e 939f                          push r25
00105f 930f                          push r16
001060 730f                          andi r16, 0x3F
001061 6400                          ori r16, 0x40
001062 940e 1080                     call lcd_send_cmd
001064 e090                          ldi r25, 0
001065 e288                          ldi r24, 40
001066 940e 10d0                     call lcd_delay_us
001068 910f                          pop r16
001069 919f                          pop r25
00106a 918f                          pop r24
00106b 9508                          ret
                                     
                                 ; lcd_set_ddram_addr: set ddram address (r16)
                                 lcd_set_ddram_addr:
00106c 930f                          push r16
00106d 6800                          ori r16, 0x80
00106e 940e 1080                     call lcd_send_cmd
                                     ;ldi r25, 0
                                     ;ldi r24, 40
                                     ;call lcd_delay_us
001070 910f                          pop r16
001071 9508                          ret
                                     
                                 ; lcd_clock_cmd: start lcd command/write
                                 ; delay for 40 μs
                                 lcd_clock_cmd:
001072 938f                          push    r24
001073 939f                          push    r25
001074 9a29                          sbi	    PORTB, 1
001075 e090                          ldi	    r25, 0
001076 e184                          ldi	    r24, 20
001077 940e 10d0                     call    lcd_delay_us
001079 9829                          cbi	    PORTB, 1
00107a e184                          ldi	    r24, 20
00107b 940e 10d0                     call    lcd_delay_us
00107d 919f                          pop	    r25
00107e 918f                          pop	    r24
00107f 9508                          ret
                                     
                                 ; lcd_send_cmd: send command (r16) to lcd
                                 lcd_send_cmd:
001080 930f                          push    r16
001081 931f                          push    r17
001082 934f                          push    r20
                                 
001083 2f10                          mov	    r17, r16
001084 7f10                          andi    r17, 0xf0
001085 0f00                          lsl	    r16
001086 0f00                          lsl	    r16
001087 0f00                          lsl	    r16
001088 0f00                          lsl	    r16
001089 9828                          cbi	    PORTB, 0
                                 
00108a 94f8                          cli
00108b b14b                          in	    r20, PORTD
00108c 704f                          andi    r20, 0x0f
00108d 2b41                          or	    r20, r17
00108e b94b                          out	    PORTD, r20
00108f 9478                          sei
001090 940e 1072                     call    lcd_clock_cmd
                                 
001092 94f8                          cli
001093 b14b                          in	    r20, PORTD
001094 704f                          andi    r20, 0x0f
001095 2b40                          or	    r20, r16
001096 b94b                          out	    PORTD, r20
001097 9478                          sei
001098 940e 1072                     call    lcd_clock_cmd
                                 
00109a 914f                          pop	    r20
00109b 911f                          pop	    r17
00109c 910f                          pop     r16
00109d 9508                          ret
                                 
                                 ; lcd_send_data: send data (r16) to lcd
                                 lcd_send_data:
00109e 930f                          push    r16
00109f 931f                          push    r17
0010a0 934f                          push    r20
                                 
0010a1 2f10                          mov	    r17, r16
0010a2 7f10                          andi    r17, 0xf0
0010a3 0f00                          lsl	    r16
0010a4 0f00                          lsl	    r16
0010a5 0f00                          lsl	    r16
0010a6 0f00                          lsl	    r16
0010a7 9a28                          sbi	    PORTB, 0
                                 
0010a8 94f8                          cli
0010a9 b14b                          in	    r20, PORTD
0010aa 704f                          andi    r20, 0x0f
0010ab 2b41                          or	    r20, r17
0010ac b94b                          out	    PORTD, r20
0010ad 9478                          sei
0010ae 940e 1072                     call    lcd_clock_cmd
                                 
0010b0 94f8                          cli
0010b1 b14b                          in	    r20, PORTD
0010b2 704f                          andi    r20, 0x0f
0010b3 2b40                          or	    r20, r16
0010b4 b94b                          out	    PORTD, r20
0010b5 9478                          sei
0010b6 940e 1072                     call    lcd_clock_cmd
0010b8 9828                          cbi	    PORTB, 0
                                 
0010b9 914f                          pop	    r20
0010ba 911f                          pop	    r17
0010bb 910f                          pop	    r16
0010bc 9508                          ret
                                 
                                 lcd_show_char:
0010bd cfe0                          rjmp lcd_send_data
                                     ;call lcd_send_data
                                     ;ret
                                 
                                 lcd_clear:
0010be 939f                          push    r25
0010bf 938f                          push    r24
0010c0 930f                          push    r16
0010c1 e001                          ldi	    r16, 0x01
0010c2 940e 1080                     call    lcd_send_cmd
0010c4 e097                          ldi	    r25, 7
0010c5 ef8f                          ldi	    r24, 255
0010c6 940e 10d0                     call    lcd_delay_us
0010c8 910f                          pop	    r16
0010c9 918f                          pop	    r24
0010ca 919f                          pop	    r25
0010cb 9508                          ret
                                 
                                 ; lcd_light_on: turn on LCD backlight
                                 ; LCD backlight is on Arduino pin D10
                                 ; that translates to PORTB(2) for UNO
                                 lcd_light_on:
0010cc 9a2a                          sbi	    PORTB, 2
0010cd 9508                          ret
                                 
                                 ; lcd_light_off: turn off LCD backlight
                                 lcd_light_off:
0010ce 982a                          cbi	    PORTB, 2
0010cf 9508                          ret
                                 
                                 ; lcd_delay_us: wait (r25:r24) μs
                                 lcd_delay_us:
0010d0 934f                          push    r20
                                 lcd_delay_us_l0:
0010d1 e044                          ldi	    r20, 4
                                 lcd_delay_us_l1:
0010d2 954a                          dec	    r20
0010d3 f7f1                          brne    lcd_delay_us_l1
0010d4 9701                          sbiw    r24, 1
0010d5 f7d9                          brne    lcd_delay_us_l0
0010d6 914f                          pop	    r20
0010d7 9508                          ret
                                 
                                 ; Zacatek programu - po resetu
                                 .org 0
000000 940c 0108                     jmp	start
                                 .org 0x16            ; 2
000016 940c 0297                     jmp interrupt
                                 
                                 .org 0x100
000100 4156
000101 494a
000102 4b43
000103 2041
000104 5655
000105 5241
000106 4e45
000107 0041                      retez: .db "VAJICKA UVARENA",0
                                 start:
                                     ; Inicializace AD prevodniku
000108 940e 028c                     call init_button
                                 re_start:
                                     ; Inicializace displeje
00010a 940e 1000                     call init_disp
00010c e0e0                          ldi r30, low(2*retez)
00010d e0f2                          ldi r31, high(2*retez)
00010e e080                          ldi r24, 0      ; button state
00010f e060                          ldi r22, 0
000110 e040                          ldi r20, 0	    ; minutes
000111 e050                          ldi r21, 0	    ; seconds
000112 e020                          ldi r18, 0	    ; blink counter
000113 e194                          ldi r25, 20     ; Timer "constant"
                                    ; Inicializace preruseni od casovace
000114 940e 0274                     call init_int
                                 
000116 e000                          ldi r16, 0       ; 3
000117 9300 0100                     sts flag, r16
                                     
000119 940e 0123                     call print_minutes
00011b e012                          ldi r17, 2
00011c e30a                          ldi r16, ':'
00011d 940e 1052                     call show_char
00011f 940e 0139                     call print_seconds
000121 940c 0194                     jmp set_minutes
                                 
                                 print_minutes:
000123 930f                          push r16
000124 936f                          push r22
000125 e000                          ldi r16, 0
000126 2f64                          mov r22, r20
                                 min_loop:
000127 306a                          cpi r22, 10
000128 f020                          brlo show_min
000129 506a                          subi r22, 10
00012a 9503                          inc r16
00012b 940c 0127                     jmp min_loop
                                 
                                 show_min:
00012d e010                          ldi r17, 0
00012e 5d00                          subi r16, -48
00012f 940e 1052                     call show_char
000131 9513                          inc r17
000132 2f06                          mov r16, r22
000133 5d00                          subi r16, -48
000134 940e 1052                     call show_char
000136 916f                          pop r22
000137 910f                          pop r16
000138 9508                          ret
                                     
                                 print_seconds:
000139 930f                          push r16
00013a 936f                          push r22
00013b e000                          ldi r16, 0
00013c 2f65                          mov r22, r21
                                 sec_loop:
00013d 306a                          cpi r22, 10
00013e f020                          brlo show_sec
00013f 506a                          subi r22, 10
000140 9503                          inc r16
000141 940c 013d                     jmp sec_loop
                                 
                                 show_sec:
000143 e013                          ldi r17, 3
000144 5d00                          subi r16, -48
000145 940e 1052                     call show_char
000147 9513                          inc r17
000148 2f06                          mov r16, r22
000149 5d00                          subi r16, -48
00014a 940e 1052                     call show_char
00014c 916f                          pop r22
00014d 910f                          pop r16
00014e 9508                          ret
                                     
                                 is_down:
00014f 930f                          push r16
000150 e060                          ldi r22, 0
000151 940e 0176                     call convert
000153 9100 0079                     lds r16, ADCH
000155 9502                          swap r16
000156 700f                          andi r16, 0b00001111
000157 3003                          cpi r16, 3
000158 f0d1                          breq is_succ
000159 910f                          pop r16
00015a 9508                          ret
                                     
                                 is_up:
00015b 930f                          push r16
00015c e060                          ldi r22, 0
00015d 940e 0176                     call convert
00015f 9100 0079                     lds r16, ADCH
000161 9502                          swap r16
000162 700f                          andi r16, 0b00001111
000163 3001                          cpi r16, 1
000164 f071                          breq is_succ
000165 910f                          pop r16
000166 9508                          ret
                                     
                                 is_select:
000167 930f                          push r16
000168 e060                          ldi r22, 0
000169 940e 0176                     call convert
00016b 9100 0079                     lds r16, ADCH
00016d 9502                          swap r16
00016e 700f                          andi r16, 0b00001111
00016f 3009                          cpi r16, 9
000170 f011                          breq is_succ
000171 910f                          pop r16
000172 9508                          ret
                                 is_succ:
000173 e061                          ldi r22, 1
000174 910f                          pop r16
000175 9508                          ret
                                 convert:
000176 930f                          push r16
000177 931f                          push r17
000178 9110 0040                     lds r17, (1<<ADSC)
00017a 9100 007a                     lds r16, ADCSRA
00017c 6400                          ori r16, (1<<ADSC)
00017d 9300 007a                     sts ADCSRA, r16
                                 conv_wait:
00017f 9100 007a                     lds r16, ADCSRA
000181 2310                          and r17, r16
000182 3010                          cpi r17, 0
000183 f7d9                          brne conv_wait
000184 911f                          pop r17
000185 910f                          pop r16
000186 9508                          ret
                                     
                                 min_print:
000187 933f                          push r19
000188 2f32                          mov r19, r18
000189 7031                          andi r19, 0b00000001
00018a 3030                          cpi r19, 0
00018b f021                          breq min_print_0
00018c 940e 0123                     call print_minutes
00018e 913f                          pop r19
00018f 9508                          ret
                                 min_print_0:
000190 940e 021a                     call print_empty_min
000192 913f                          pop r19
000193 9508                          ret
                                 
                                 set_minutes:
000194 940e 01ad                     call set_sel_btn_flag
000196 940e 01b5                     call set_up_btn_flag
000198 940e 01bd                     call set_down_btn_flag
00019a 9170 0100                     lds r23, flag
00019c 3070                          cpi r23, 0
00019d f3b1                          breq set_minutes
00019e e070                          ldi r23, 0  
00019f 9370 0100                     sts flag, r23
0001a1 9523                          inc r18
0001a2 940e 0187                     call min_print
0001a4 3081                          cpi r24, 1
0001a5 f1f9                          breq ssp
0001a6 3083                          cpi r24, 3
0001a7 f109                          breq dec_min
0001a8 3082                          cpi r24, 2
0001a9 f151                          breq inc_min
0001aa e080                          ldi r24, 0
0001ab 940c 0194                     jmp set_minutes
                                     
                                 set_sel_btn_flag:
0001ad 940e 0167                     call is_select
0001af 3061                          cpi r22, 1
0001b0 f4a1                          brne return2
0001b1 3080                          cpi r24, 0
0001b2 f491                          brne return2
0001b3 e081                          ldi r24, 1
0001b4 9508                          ret
                                     
                                 set_up_btn_flag:
0001b5 940e 015b                     call is_up
0001b7 3061                          cpi r22, 1
0001b8 f461                          brne return2
0001b9 3080                          cpi r24, 0
0001ba f451                          brne return2
0001bb e082                          ldi r24, 2
0001bc 9508                          ret
                                     
                                 set_down_btn_flag:
0001bd 940e 014f                     call is_down
0001bf 3061                          cpi r22, 1
0001c0 f421                          brne return2
0001c1 3080                          cpi r24, 0
0001c2 f411                          brne return2
0001c3 e083                          ldi r24, 3
0001c4 9508                          ret
                                     
0001c5 9508                      return2: ret
                                 
                                 uf_min:
0001c6 e34b                          ldi r20, 59
0001c7 940c 0194                     jmp set_minutes
                                     
                                 dec_min:
0001c9 954a                          dec r20
0001ca e080                          ldi r24, 0
0001cb 3f4f                          cpi r20, 255
0001cc f3c9                          breq uf_min
0001cd 940c 01cf                     jmp sub_min
                                 
                                 sub_min:
0001cf 334c                          cpi r20, 60
0001d0 f218                          brlo set_minutes
0001d1 534c                          subi r20, 60
0001d2 940c 01cf                     jmp sub_min
                                 
                                 inc_min:
0001d4 9543                          inc r20
0001d5 e080                          ldi r24, 0
0001d6 940c 01cf                     jmp sub_min
                                 
                                 sec_print:
0001d8 933f                          push r19
0001d9 2f32                          mov r19, r18
0001da 7031                          andi r19, 0b00000001
0001db 3030                          cpi r19, 0
0001dc f021                          breq sec_print_0
0001dd 940e 0139                     call print_seconds
0001df 913f                          pop r19
0001e0 9508                          ret
                                 sec_print_0:
0001e1 940e 0226                     call print_empty_sec
0001e3 913f                          pop r19
0001e4 9508                          ret
                                     
                                 ssp:
0001e5 e080                          ldi r24, 0
0001e6 940e 0123                     call print_minutes
                                 set_seconds:
0001e8 940e 01ad                     call set_sel_btn_flag
0001ea 940e 01b5                     call set_up_btn_flag
0001ec 940e 01bd                     call set_down_btn_flag
0001ee 9170 0100                     lds r23, flag
0001f0 3070                          cpi r23, 0
0001f1 f3b1                          breq set_seconds
0001f2 e070                          ldi r23, 0  
0001f3 9370 0100                     sts flag, r23
0001f5 9523                          inc r18
0001f6 940e 01d8                     call sec_print
0001f8 3081                          cpi r24, 1
0001f9 f1e1                          breq set_int_main
0001fa 3082                          cpi r24, 2
0001fb f029                          breq inc_sec
0001fc 3083                          cpi r24, 3
0001fd f051                          breq dec_sec
0001fe e080                          ldi r24, 0
0001ff 940c 01e8                     jmp set_seconds
                                     
                                 inc_sec:
000201 9553                          inc r21
000202 e080                          ldi r24, 0
000203 940c 020c                     jmp sub_sec
                                 
                                 uf_sec:
000205 e35b                          ldi r21, 59
000206 940c 01e8                     jmp set_seconds
                                     
                                 dec_sec:
000208 955a                          dec r21
000209 e080                          ldi r24, 0
00020a 3f5f                          cpi r21, 255
00020b f3c9                          breq uf_sec
                                 
                                 sub_sec:
00020c 335c                          cpi r21, 60
00020d f2d0                          brlo set_seconds
00020e 535c                          subi r21, 60
00020f 940c 020c                     jmp sub_sec
                                 
                                 dec_sec_r:
000211 955a                          dec r21
000212 3f5f                          cpi r21, 255
000213 f009                          breq dec_min_r
000214 9508                          ret
                                 
                                 dec_min_r:
000215 3040                          cpi r20, 0
000216 f189                          breq three_zero_blink
000217 954a                          dec r20
000218 e35b                          ldi r21, 59
000219 9508                          ret
                                 
                                 print_empty_min:
00021a 930f                          push r16
00021b 931f                          push r17
00021c e200                          ldi r16, ' '
00021d e010                          ldi r17, 0
00021e 940e 1052                     call show_char
000220 9513                          inc r17
000221 940e 1052                     call show_char
000223 911f                          pop r17
000224 910f                          pop r16
000225 9508                          ret
                                 
                                 print_empty_sec:
000226 930f                          push r16
000227 931f                          push r17
000228 e200                          ldi r16, ' '
000229 e013                          ldi r17, 3
00022a 940e 1052                     call show_char
00022c 9513                          inc r17
00022d 940e 1052                     call show_char
00022f 911f                          pop r17
000230 910f                          pop r16
000231 9508                          ret
                                 
                                 s:
000232 e200                          ldi r16, ' '
000233 e010                          ldi r17, 0
000234 940c 010a                     jmp re_start
                                     
                                 set_int_main:
000236 e39d                          ldi r25, 61
000237 940e 0274                     call init_int
                                     
                                 main_loop:
000239 9170 0100                     lds r23, flag
00023b 3070                          cpi r23, 0       ; nacteni a otestovani hodnoty flag-u
00023c f3e1                          breq main_loop   ; pokud neni flag -> navrat na zacatek
                                                      ; je flag
00023d e070                          ldi r23, 0       ; vycisteni flag-u
00023e 9370 0100                     sts flag, r23
                                 
                                     ; akce provedena 1x za sekundu 4
000240 940e 0123                     call print_minutes
000242 940e 0139                     call print_seconds
000244 940e 0211                     call dec_sec_r
                                     
                                 
000246 940c 0239                     jmp main_loop
                                 
                                 three_zero_blink:
000248 e010                          ldi r17, 0
000249 e040                          ldi r20, 0
00024a e050                          ldi r21, 0
00024b 9170 0100                     lds r23, flag
00024d 3070                          cpi r23, 0
00024e f3c9                          breq three_zero_blink
00024f e070                          ldi r23, 0  
000250 9370 0100                     sts flag, r23
000252 9523                          inc r18
000253 940e 01d8                     call sec_print
000255 940e 0187                     call min_print
000257 9533                          inc r19
000258 3039                          cpi r19, 9
000259 f011                          breq print_string
00025a 940c 0248                     jmp three_zero_blink
                                     
                                 print_string:
00025c e060                          ldi r22, 0
00025d 9105                          lpm r16, Z+
00025e 940e 1052                     call show_char
000260 9513                          inc r17
000261 3000                          cpi r16, 0
000262 f011                          breq srend
000263 940c 025c                     jmp print_string
                                 
                                 srend:
000265 e080                          ldi r24, 0
                                 end:
000266 940e 01ad                     call set_sel_btn_flag
000268 9170 0100                     lds r23, flag
00026a 3070                          cpi r23, 0
00026b f3d1                          breq end
00026c e070                          ldi r23, 0  
00026d 9370 0100                     sts flag, r23
00026f 3081                          cpi r24, 1
000270 f209                          breq s
000271 e080                          ldi r24, 0
000272 940c 0266                     jmp end
                                 init_int:            ; 5
000274 930f                          push r16
000275 94f8                          cli ; globalni zakazani preruseni
                                 
                                     ; vycisteni aktualni hodnoty citace TCNT1 (aby prvni sekunda nezacala nekde "od pulky")
000276 2700                          clr r16
                                     ; Neprehazujte poradi nahravani TCNT1H a TCNT1L - hodnota by se nemusela spravne ulozit!
000277 9300 0085                     sts TCNT1H, r16
000279 9300 0084                     sts TCNT1L, r16
                                 
                                     ; povoleni preruseni ve chvili, kdy citac TCNT1 dosahne hodnoty OCR1A
00027b e002                          ldi r16, (1<<OCIE1A)
00027c 9300 006f                     sts TIMSK1, r16
                                 
                                     ; nastaveni cisteni citace TCNT1 ve chvili, kdy dosahne hodnoty OCR1A (1<<WGM12)
                                     ; nastaveni preddelicky na 1024 (0b101<<CS10 - bity CS12, CS11 a CS10 jsou za sebou)
00027e e00a                          ldi r16, (1<<WGM12) | (0b010<<CS10)
00027f 9300 0081                     sts TCCR1B, r16
                                 
                                     ; nastaveni OCR1A, tj. vysledne frekvence preruseni
                                     ; frekvence preruseni = frekvence cipu 328P / preddelicka / (OCR1A+1)
                                     ; frekvence cipu 328P je 16 MHz, tj. 16000000
                                     ; preddelicka je nastavena na 1024
                                     ; frekvenci preruseni chceme na 1 Hz
                                     ; OCR1A = (frekvence cipu 328P / preddelicka / frekvence preruseni) - 1
                                     ; OCR1A = (16000000 / 1024 / 1) - 1
                                     ; OCR1A = 15624
                                     ; 16bitovou hodnotu je treba nastavit do dvou registru OCR1AH:OCR1AL
                                     ; 15624 = 61 * 256 + 8
                                     ; Neprehazujte poradi nahravani OCR1AH a OCR1AL - hodnota by se nemusela spravne ulozit!
000281 2f09                          mov r16, r25
000282 9300 0089                     sts OCR1AH, r16
000284 e008                          ldi r16, 8
000285 9300 0088                     sts OCR1AL, r16
                                 
                                     ; zakazani preruseni od tlacitek
000287 2700                          clr r16
000288 bb0d                          out EIMSK, r16
                                 
000289 9478                          sei ; globalni povoleni preruseni
00028a 910f                          pop r16
00028b 9508                          ret
                                     
                                 init_button:
00028c 930f                          push r16
                                     ; povoleni AD prevodniku (nastaveni bitu ADEN v pameti na adrese ADCSRA bez ovlivneni ostatnich bitu) 1
00028d 9100 007a                     lds r16, ADCSRA
00028f 6800                          ori r16, (1<<ADEN); 2
000290 9300 007a                     sts ADCSRA, r16
                                 
                                     ; nastaveni referencniho napeti (0b01<<REFS0)
                                     ; nastaveni zarovnani vystupu vlevo (1<<ADLAR); 3
000292 e600                          ldi r16, (0b01<<REFS0) | (1<<ADLAR); 4
000293 9300 007c                     sts ADMUX, r16
                                 
000295 910f                          pop r16
000296 9508                          ret
                                 
                                 interrupt:           ; 6
                                     ; uklid registru a SREG
000297 930f                          push r16
000298 b70f                          in r16, SREG
000299 930f                          push r16
                                 
                                     ; nastav flag
00029a e001                          ldi r16, 1
00029b 9300 0100                     sts flag, r16
                                 
                                     ; obnoveni SREG a registru
00029d 910f                          pop r16
00029e bf0f                          out SREG, r16
00029f 910f                          pop r16
0002a0 9518                          reti             ; 7


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 116 r17:  32 r18:   6 r19:  14 r20:  65 
r21:  12 r22:  21 r23:  20 r24:  40 r25:  18 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   1 r31:   1 
Registers used: 13 out of 35 (37.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   1 
andi  :  18 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  23 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 brlt  :   0 brmi  :   0 
brne  :   9 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  67 cbi   :   4 cbr   :   0 
clc   :   0 clh   :   0 cli   :  10 cln   :   0 clr   :   2 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  34 cpse  :   0 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  13 inc   :  13 jmp   :  19 
ld    :   0 ldd   :   0 ldi   :  75 lds   :  12 lpm   :   1 lsl   :   8 
lsr   :   0 mov   :  10 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   4 ori   :  10 out   :  14 pop   :  43 
push  :  40 rcall :   0 ret   :  33 reti  :   1 rjmp  :   1 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 sbis  :   0 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :  10 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  16 
sub   :   0 subi  :   8 swap  :   3 tst   :   0 wdr   :   0 
Instructions used: 33 out of 113 (29.2%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0021b0   1258     16   1274   32768   3.9%
[.dseg] 0x000100 0x000101      0      1      1    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
